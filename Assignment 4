##1.1
##Write a Python Program(with class concepts) to find the area of the triangle using the below formula.
##area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
##Function to take the length of the sides of triangle from user should be defined in the parent class and function to calculate the area should be defined in subclass.


##Solution

class sides:
    def __init__(self,a,b,c):
        self.a=a
        self.b=b
        self.c=c
        
class triangle(sides):
    def area(self):
        s=(self.a+self.b+self.c)*0.5
        return float((s * (s - self.a) * (s - self.b) * (s - self.c))) ** 0.5

a, b, c = float(input("a = ")), float(input("b = ")), float(input("c = "))
t=triangle(a,b,c)
print('area of triangle is ', t.area())


##1.2
## Write a function filter_long_words() that takes a list of words and an integer n and returns the list of words that are longer than n.

#Solution
def filter_long_words(lst,n):
    a=[]
    for i in lst:
        if n<len(i):
            a.append(i)
    return a

OR

def filter_long_words1(lst,n):
    return filter(lambda i:len(i)>n,lst)
    
##2.1 
##Write a Python program using function concept that maps list of words into a list of integers representing the lengths of the corresponding words.
##Hint: If a list [ ab,cde,erty] is passed on to the python function output should come as [2,3,4]
##Here 2,3 and 4 are the lengths of the words in the list.

##Solution
def map_words(lst):
    return list(map(len,lst))
    
lst=['ab','cde','erty']
map_words(lst)


##2.2
##Write a Python function which takes a character (i.e. a string of length 1) and returns True if
it is a vowel, False otherwise.

def is_vowel(string):
    a=['a','e','i','o','u']
    if string in a:
        return True 
    else:
        return False
